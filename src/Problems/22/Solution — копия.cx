namespace LeetCode.Problems._22;

public class Solution
{
    public IList<string> GenerateParenthesis(int n)
    {
        IList<string> retVal = new List<string>();
        int lngth = n * 2;
        int startLeftIdx = n - 1;
        int startRightIdx = n;
        char[] targetArray = new char[lngth];
        for (int i = 0, j = 1; i < n; i++, j++)
        {
            targetArray[i] = '(';
            targetArray[lngth - j] = ')';
        }
        retVal.Add(new string(targetArray));

        startLeftIdx++;
        for (int i = 0; i < n - 1; i++)
        {
            SwapValues(targetArray, startRightIdx, --startRightIdx);
            var curLeft = startLeftIdx;
            retVal.Add(new string(targetArray));
            char[] rightArray = new char[lngth];
            Array.Copy(targetArray, rightArray, lngth);
            for (int j = 0; j < n - 2; j++)
            {
                SwapValues(rightArray, curLeft, ++curLeft);
                retVal.Add(new string(rightArray));
            }

            if (n > 3 && startRightIdx == 1 && curLeft == lngth - 2)
            {
                SwapValues(rightArray, n - 1, n);
                retVal.Add(new string(rightArray));
            }
        }


        return retVal;
    }

    private void SwapValues(char[] arr, int idx0, int idx1)
    {
        arr[idx0] ^= arr[idx1];
        arr[idx1] ^= arr[idx0];
        arr[idx0] ^= arr[idx1];
    }
}
