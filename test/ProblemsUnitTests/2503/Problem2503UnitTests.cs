using NUnit.Framework;
using LeetCode.Problems._2503;

namespace ProblemsUnitTests._2503;

public class Problem2503UnitTests
{
    [SetUp]
    public void Setup()
    {
    }

    [Test]
    public void Test0()
    {
        int[][] grid = [[1, 2] ,
                        [2, 5]];
        int[] queries = [3, 1, 2, 3];
        int[] expected = [3, 0, 1, 3];
        Assert.That(new Solution().MaxPoints(grid, queries), Is.EqualTo(expected));
        Assert.That(new Solution2().MaxPoints(grid, queries), Is.EqualTo(expected));
    }
    [Test, CancelAfter(20)]
    public void Test1()
    {
        int[][] grid = [[1, 2, 3], [2, 5, 7], [3, 5, 1]];
        int[] queries = [5, 6, 2];
        int[] expected = [5, 8, 1];
        Assert.That(new Solution().MaxPoints(grid, queries), Is.EqualTo(expected));
        Assert.That(new Solution2().MaxPoints(grid, queries), Is.EqualTo(expected));
        Assert.That(new Solution3().MaxPoints(grid, queries), Is.EqualTo(expected));
    }

    [Test]
    public void Test2()
    {
        int[][] grid = [[4, 2, 1, 7], [1, 1, 2, 5], [3, 3, 2, 4], [1, 5, 3, 5]];
        int[] queries = [6, 5, 8, 4, 7];
        int[] expected = [15, 12, 16, 0, 15];
        Assert.That(new Solution().MaxPoints(grid, queries), Is.EqualTo(expected));
        Assert.That(new Solution2().MaxPoints(grid, queries), Is.EqualTo(expected));
    }

    [Test]
    public void Test3()
    {
        int[][] grid = [[444424, 409221, 703419, 11307, 578382, 330430, 522887, 38831, 267101, 315541, 148425, 360873],
                        [353160, 3217, 718922, 509568, 494803, 327636, 715882, 456279, 374061, 701863, 711832, 644822],
                        [459535, 264294, 246310, 405317, 275802, 948618, 449015, 176733, 921040, 56692, 632708, 556696],
                        [167402, 594284, 8377, 766746, 728202, 329140, 399028, 907843, 68783, 149661, 244321, 861358],
            /*4*/       [727577, 582470, 946680, 222674, 152875, 128658, 389710, 581164, 512061, 367464, 883657, 78004],
                        [463513, 473823, 328325, 888670, 267782, 435621, 153221, 877511, 900231, 72761, 825121, 532939],
                        [992835, 33883, 587426, 680675, 674055, 682929, 750368, 241142, 241026, 369751, 462134, 785672],
                        [915635, 918034, 398025, 400424, 695630, 594801, 748962, 278900, 705889, 570212, 42410, 823342],
                        [644602, 961002, 489119, 606936, 327139, 664880, 455045, 231423, 114466, 315707, 25092, 961268],
            /*9*/       [962857, 647428, 139005, 221262, 469484, 669734, 66022, 473118, 258066, 67408, 545435, 316643],
                        [977028, 938186, 277400, 756609, 491213, 704014, 292941, 392893, 280499, 650462, 270100, 477276],
                        [393574, 562825, 637562, 639836, 8932, 540799, 758836, 403682, 79851, 17885, 851550, 499020],
                        [403665, 119906, 305796, 88211, 759076, 441097, 164887, 709599, 194, 468995, 922288, 359913],
                        [696749, 265394, 517399, 161062, 512967, 205098, 814158, 627951, 286474, 763625, 370987, 798077],
            /*14*/      [166098, 940946, 871758, 690278, 903705, 368584, 576209, 94794, 25522, 255261, 209835, 540769],
                        [8088, 89612, 457088, 492467, 511285, 900536, 734726, 683046, 515695, 14749, 988608, 977041],
            /*16*/      [76149, 112648, 515127, 257871, 912674, 880020, 32805, 688253, 722582, 931114, 734057, 939655],
            /*17*/      [395351, 377494, 543729, 368629, 913310, 69242, 737795, 849175, 870860, 278493, 575561, 111787]];

        int[] queries = [483649, 690923, 317026, 408761, 985459, 619592, 287085, 302896, 241756, 557463, 914140, 994632,
                        511904, 377570, 272415, 840485, 578955, 797418, 609746, 388421, 517504, 170621, 188489, 169881, 466574];
        int[] expected = [11, 149, 0, 0, 214, 117, 0, 0, 0, 35, 198, 216,
                        16, 0, 0, 179, 36, 175, 117, 0, 16, 0, 0, 0, 11];
        Assert.That(new Solution().MaxPoints(grid, queries), Is.EqualTo(expected));//425 iterations
        Assert.That(new Solution2().MaxPoints(grid, queries), Is.EqualTo(expected));//1043 iterations
        Assert.That(new Solution3().MaxPoints(grid, queries), Is.EqualTo(expected));//5587 iterations
    }
}
