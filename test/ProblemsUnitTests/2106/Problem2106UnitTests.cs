using LeetCode.Problems._2106;

namespace ProblemsUnitTests._2106;

public class Problem2106UnitTests
{
    [SetUp]
    public void Setup()
    {
    }

    [TestCaseSource(nameof(GetTestCaseDatas))]
    public void SolutionTest((int[][] input, int startPos, int k, int expected) td)
    {
        Assert.That(new Solution().MaxTotalFruits(td.input, td.startPos, td.k), Is.EqualTo(td.expected));
    }

    private static IEnumerable<(int[][], int, int, int)> GetTestCaseDatas()
    {
        yield return ([[200000, 10000]], 200000, 0, 10000);
        yield return ([[4, 8]], 5, 4, 8);
        yield return ([[3, 8]], 0, 4, 8);
        yield return ([[2, 8], [6, 3], [8, 6]], 5, 4, 9);
        yield return ([[0, 9], [4, 1], [5, 7], [6, 2], [7, 4], [10, 9]], 5, 4, 14);
        yield return ([[0, 3], [6, 4], [8, 5]], 3, 2, 0);
        yield return ([[0, 2], [3, 4], [5, 1], [8, 10], [13, 3], [17, 6], [22, 2], [28, 9], [35, 5], [43, 1], [52, 7]], 20, 15, 20);
        yield return ([[5, 10], [6, 1], [7, 4], [8, 2], [9, 8], [10, 5], [11, 3], [12, 6], [13, 2], [14, 9], [15, 7], [16, 4], [17, 1], [18, 2]], 10, 10, 47);
        yield return ([[2, 5], [10, 3], [20, 8], [30, 6], [40, 2], [50, 9], [60, 4], [70, 7], [80, 1]], 0, 100, 45);
        yield return ([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], 3, 0, 3);
        yield return ([[0, 100], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], 0, 3, 103);
        yield return ([[10, 5], [12, 6], [14, 7], [16, 8], [18, 9], [20, 10], [22, 11]], 15, 4, 17);
        yield return ([[1, 5], [4, 2], [6, 3], [9, 8], [13, 1], [14, 7], [15, 4], [18, 6], [22, 5], [25, 2]], 14, 10, 23);
        yield return ([[0, 3], [2, 6], [3, 5], [5, 9], [7, 2], [8, 4], [9, 7], [11, 1], [14, 8], [17, 3], [19, 6], [21, 5], [24, 4], [26, 2], [29, 10]], 9, 12, 36);
        yield return ([[0, 7], [7, 4], [9, 10], [12, 6], [14, 8], [16, 5], [17, 8], [19, 4], [20, 1], [21, 3], [24, 3], [25, 3], [26, 1], [28, 10], [30, 9], [31, 6], [32, 1], [37, 5], [40, 9]], 21, 30, 71);
        yield return ([[3, 10], [8, 6], [11, 8], [16, 5], [17, 1], [19, 2], [24, 4], [29, 4], [30, 8], [31, 1], [33, 2], [34, 9], [35, 9], [40, 10]], 39, 13, 43);
        yield return ([[0, 8], [9, 10], [10, 3], [11, 7], [18, 5], [21, 3], [26, 2], [27, 10], [31, 6], [32, 5], [34, 6], [40, 9]], 40, 2, 9);
    }
}
